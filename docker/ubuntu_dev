FROM ubuntu:20.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y build-essential cmake clangd llvm clang libclang-dev && \
    apt-get install -y wget curl fuse sudo kmod vim python python3 python3-pip git subversion lua5.3 && \
	apt-get install -y iputils-ping  rsync openssl libssl-dev libncurses-dev libreadline-dev libcurl4-openssl-dev libtirpc-dev flex bison unzip sysstat htop iotop net-tools && \
	apt-get install -y libncurses5 libncurses5-dev && \
    apt-get install -y zsh tmux neovim autoconf  pkg-config  automake global nodejs npm && \
    apt-get install -y proxychains-ng && \
    mkdir -p ~/tool && \
    cd ~/tool && \
##  v2ray
    # mkdir v2ray && \
    # cd v2ray && \
    # wget https://github.com/v2fly/v2ray-core/releases/download/v4.39.2/v2ray-linux-64.zip && \
    # unzip v2ray-linux-64.zip && \
    # cd .. && \
##  nvim config
    wget https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz && \
    tar -zxvf nvim-linux64.tar.gz && \
    mv nvim-linux64/bin/* /usr/local/bin/ && \
    mv nvim-linux64/share/* /usr/local/share/ && \
    mv nvim-linux64/lib/* /usr/local/lib/ && \
    rm -rf nvim-linux64* && \
    python3 -m pip install neovim-remote && \
    python3 -m pip install --user --upgrade pynvim && \
    git clone https://github.com/KyrielightWei/GoodraNvim.git && \
    mkdir -p ~/.config/nvim && \
    echo "source ~/tool/GoodraNvim/init.vim" >> ~/.config/nvim/init.vim && \
    cd ~ && \
##  ctags
    git clone https://github.com/universal-ctags/ctags.git && \
    cd ctags && \
    ./autogen.sh && \
    ./configure && \
    make && \
    make install &&\
    cd .. && \
    rm -rf ctags && \
##  greenplum pre
    apt-get install -y bison ccache cmake curl flex git-core gcc g++ inetutils-ping krb5-kdc krb5-admin-server libapr1-dev && \
    apt-get install -y libbz2-dev libcurl4-gnutls-dev libevent-dev libkrb5-dev libpam-dev libperl-dev libreadline-dev libssl-dev && \
    apt-get install -y libxerces-c-dev libxml2-dev libyaml-dev libzstd-dev locales net-tools ninja-build openssh-client openssh-server && \
    apt-get install -y openssl pkg-config python3-dev python3-pip python3-psutil python3-pygresql python3-yaml zlib1g-dev && \
##  nodejs
    # cd ~/tool && \
    # wget https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz && \
    # tar -xvf node-v16.13.0-linux-x64.tar.xz && \
    # mv node-v16.13.0-linux-x64 nodejs && \
    # mv nodejs/bin/* /usr/local/bin/ &&  \
    # mv nodejs/lib/* /usr/local/lib/ && \
    # mv nodejs/include/* /usr/local/include/ && \
    # rm -f node-v16.13.0-linux-x64.tar.xz && \
    # rm -rf nodejs && \
##  Go
    cd ~/tool && \
    wget https://golang.org/dl/go1.17.3.linux-amd64.tar.gz && \
    tar -zxvf go1.17.3.linux-amd64.tar.gz && \
    echo 'export GOROOT="$HOME/tool/go"' >> ~/.bashrc && \
    echo 'export GOPATH="$HOME/gowork/"' >> ~/.bashrc && \
    echo 'export PATH="$GOROOT/bin:$GOPATH/bin:$PATH"' >> ~/.bashrc && \
    rm -f go1.17.3.linux-amd64.tar.gz && \
## Bear
    cd ~/tool && \
    apt-get install -y libfmt-dev libspdlog-dev nlohmann-json3-dev libgrpc++-dev protobuf-compiler-grpc libssl-dev && \
    wget https://github.com/rizsotto/Bear/archive/refs/tags/3.0.17.zip && \
    unzip 3.0.17.zip && \
    cd Bear-3.0.17 && \
    cmake -DENABLE_UNIT_TESTS=OFF -DENABLE_FUNC_TESTS=OFF . && \
    make all && \
    make install && \
    cd .. && \
    rm -rf Bear-3.0.17 3.0.17.zip && \
## tmux & zsh
    cd ~/tool && \
    git clone https://github.com/PokemonWei/all-dev-tools.git && \
    bash all-dev-tools/term/zsh_tmux_sys_init.sh && \
    bash all-dev-tools/term/ccls_sys_install.sh && \
    bash all-dev-tools/term/nvim-init.sh && \
## alacritty  Dependencies
	#apt-get install -y cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3 && \
## ssh
    apt-get install -y openssh-server && \
    sed -i "s/#Port 22/Port 22/g" /etc/ssh/sshd_config && \
    sed -i "s/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g" /etc/ssh/sshd_config && \
    sed -i "s/#ListenAddress ::/ListenAddress ::/g" /etc/ssh/sshd_config && \
    sed -i "s/#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config && \
    sed -i "s/#PasswordAuthentication yes/PasswordAuthentication yes/g" /etc/ssh/sshd_config && \
    sed -i "s/#PermitEmptyPasswords no/PermitEmptyPasswords yes/g" /etc/ssh/sshd_config && \
    /usr/bin/ssh-keygen -A && \
    mkdir -p /run/sshd
CMD ["/usr/sbin/sshd"]
